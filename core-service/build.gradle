ext {
    springDocVersion = '1.6.12'
    testContainersVersion = '1.17.5'
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-security:${springDocVersion}"
    implementation "com.cloudinary:cloudinary-http44:1.33.0"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.flywaydb:flyway-core"
    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    runtimeOnly "org.postgresql:postgresql"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.2
            }
        }
    }
}

tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: "test") {

    group = "Reporting"
    description = "Generate Jacoco coverage reports for the test build."

    reports {
        html.enabled = true
        xml.enabled = true
    }

    def excludes = [
            '**/*Test*.*',
            '**/actions/*.*',
            '**/core/*.*',
            '**/markers/*.*',
            '**/services/**/*.*',
            '**/toolwindow/*.*',
            '**/utils/*.*'
    ]

    def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
    def kotlinClasses = fileTree(dir: "${buildDir}/classes/kotlin/main", excludes: excludes)
    classDirectories.from = files([javaClasses, kotlinClasses])

    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
            "$project.projectDir/src/main/kotlin",
            "$buildDir/generated/source/kapt/test"
    ])

    executionData.from = files("${project.buildDir}/jacoco/test.exec")
}
bootJar {
    enabled = true
}

bootBuildImage {
    imageName = 'qjnzero/' + rootProject.name + '-' + project.name
}
